- job:
    name: 'OnMetal_Multi_Node_AIO'
    project-type: workflow
    build-discarder:
        days-to-keep: 30
    concurrent: true
    parameters:
      - rpc_gating_params
      - rpc_params
      - string:
          name: OSA_OPS_REPO
          default: https://github.com/openstack/openstack-ansible-ops
      - string:
          name: OSA_OPS_BRANCH
          default: master
      - string:
          name: REGION
          default: "IAD"
      - string:
          name: FLAVOR
          default: "onmetal-io1"
      - string:
          name: IMAGE
          default: "OnMetal - Ubuntu 14.04 LTS (Trusty Tahr)"
      - string:
          name: INSTANCE_NAME
          default: AUTO
          description: |
            Set instance name or "AUTO" to have it generated based on job
            name and build number. Beware the 63 char container name limit
            as container names includes the host name.
      - string:
          name: OPENSTACK_ANSIBLE_BRANCH
          default: stable/newton
          description: Openstack Ansible branch to use in setup
      - choice:
          name: DEFAULT_IMAGE
          description: Version of Ubuntu image to use for VMs (14.04.4 or 16.04)
          choices:
            - '14.04.4'
            - '16.04'
      - bool:
          name: PARTITION_HOST
          default: true
          description: Enable partitioning of host data disk device
      - string:
          name: STAGES
          default: |
            Allocate Resources, Connect Slave, Setup Host, Setup Cobbler, Setup Virtual Networks,
            Deploy VMs, Setup OpenStack Ansible, Prepare Configs, Deploy Script, Cleanup
          description: |
            Pipeline stages to run CSV. Note that this list does not influence execution order.
            Options:
              Allocate Resources
              Connect Slave
              Setup Host
              Setup Cobbler
              Setup Virtual Networks
              Deploy VMs
              Setup OpenStack Ansible
              Prepare Configs
              Deploy Script (uses deploy.sh)
              Deploy Playbooks (uses playbooks)
              Pause (use to hold instance for investigation before cleanup)
              Cleanup
      - text:
          name: PLAYBOOKS
          default: |
            [
              {"playbook": "setup-hosts.yml",           "path": "/opt/rpc-openstack/openstack-ansible/playbooks", "args": "--skip-tags=V-38462,V-38660"},
              {"playbook": "ceph-all.yml",              "path": "/opt/rpc-openstack/rpcd/playbooks"},
              {"playbook": "setup-infrastructure.yml",  "path": "/opt/rpc-openstack/openstack-ansible/playbooks"},
              {"playbook": "setup-openstack.yml",       "path": "/opt/rpc-openstack/openstack-ansible/playbooks"},
              {"playbook": "rpc-support.yml",           "path": "/opt/rpc-openstack/rpcd/playbooks"},
              {"playbook": "setup-maas.yml",            "path": "/opt/rpc-openstack/rpcd/playbooks"},
              {"playbook": "setup-logging.yml",         "path": "/opt/rpc-openstack/rpcd/playbooks"},
              {"playbook": "verify-maas.yml",           "path": "/opt/rpc-openstack/rpcd/playbooks"}
            ]
          description: |
            OSA/RPC playbooks to run if running Deploy Playbooks stage

    dsl: |
      node(){
        try {
          dir("rpc-gating"){
            git branch: env.RPC_GATING_BRANCH, url: env.RPC_GATING_REPO
            pubCloudSlave = load 'pipeline-steps/pubcloud.groovy'
            common = load 'pipeline-steps/common.groovy'
            multi_node_aio_prepare = load 'pipeline-steps/multi_node_aio_prepare.groovy'
            deploy = load 'pipeline-steps/deploy.groovy'
          }
          instance_name = common.gen_instance_name()
          pubCloudSlave.getPubCloudSlave(instance_name: instance_name)

          node(instance_name){
            multi_node_aio_prepare.prepare()
            common.conditionalStage(
              stage_name: "Deploy Script",
              stage: {
                  deploy.deploy_sh(
                    environment_vars: [
                      "FORKS=10",
                      "DEPLOY_HAPROXY=yes",
                      "DEPLOY_ELK=yes",
                      "DEPLOY_TEMPEST=yes",
                      "DEPLOY_AIO=no",
                      "DEPLOY_MAAS=no"
                      ]
                  ) // deploy_sh
              } // stage
            ) // conditionalStage

            common.conditionalStage(
              stage_name: "Deploy Playbooks",
              stage: {
                  deploy.deploy()
              } // stage
            ) // conditionalStage

          }// public cloud node
        } catch (e){
            currentBuild.result = 'FAILURE'
            throw e
        } finally {
            pubCloudSlave.delPubCloudSlave()
        }
      } // cit node
